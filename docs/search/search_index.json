{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Micromouse Docs","text":"<p>A lightweight teaching environment for maze-solving robots. Write simple scripts, visualize the mouse moving in a grid, and iterate fast. This site is your one-stop reference for commands, variables, and examples.</p>"},{"location":"#quick-start","title":"Quick start","text":"<ol> <li>Install Micromouse: Follow the installation guide.</li> <li>Select either sandbox or campaign mode: Choose your preferred mode to start scripting.</li> <li>Write a script: Use the commands reference to create your first script.</li> <li>Run your script: Execute it in the Micromouse environment and watch your mouse navigate the maze.</li> <li>Explore examples: Check out the examples to see how others have solved mazes.</li> </ol>"},{"location":"#documentation","title":"Documentation","text":"<p>Micromouse runs its own DSL language designed for simplicity and ease of use. It works on indentation based logic similar to languages like Python. The documentation is structured to help you quickly find what you need:</p> <ul> <li> <p>Commands: Learn about the commands available in Micromouse.</p> <ul> <li>Move</li> <li>Turn</li> <li>Loop</li> <li>Repeat</li> <li>Break</li> </ul> </li> <li> <p>Variables: Understand how to use variables in your scripts.</p> <ul> <li>Integer</li> <li>Float</li> <li>String</li> <li>Vector</li> <li>List</li> </ul> </li> <li> <p>Examples: Get inspired by example scripts.</p> <ul> <li>Example 1</li> <li>Example 2</li> </ul> </li> </ul>"},{"location":"getting-started/","title":"Getting Started with Micromouse","text":"<p>Welcome to Micromouse! This guide will help you get started with the Micromouse environment, allowing you to write scripts and visualize your maze-solving robot in action. Follow these steps to set up your environment and begin your journey into maze-solving robotics.</p>"},{"location":"getting-started/#step-1-install-micromouse","title":"Step 1: Install Micromouse","text":"<p>If you haven't already, follow the installation guide to set up Micromouse on your system. Ensure you meet the minimum system requirements and have completed the installation steps.</p>"},{"location":"getting-started/#step-2-select-your-mode","title":"Step 2: Select Your Mode","text":"<p>Once Micromouse is installed you can either launch into the sandbox or the campaign. The campaign mode provides a series of challenges to solve, while the sandbox allows you to freely experiment with your scripts.</p> <p>Campaign mode is a great way to learn as it provides structured challenges that gradually increase in complexity. You can access the campaign mode from the main menu after launching Micromouse.</p>"},{"location":"getting-started/#step-3-write-your-first-script","title":"Step 3: Write Your First Script","text":"<p>This guide will really help with solving mission 1 in the campaign but also help with the sandbox mode. Use the commands reference to learn about the available commands and how to use them in your scripts. Here\u2019s a simple example to get you started:</p> <pre><code># Move forward constantly\nLOOP\n    MOVE\n</code></pre> <p>You'll note that you can use <code>#</code> to add comments to your scripts, which is a good practice to explain what your code does.</p> <p>You'll also notice that the code is indented. Micromouse uses indentation to define blocks of code, similar to Python. Make sure your indentation is consistent to avoid syntax errors.</p>"},{"location":"getting-started/#step-4-run-your-script","title":"Step 4: Run Your Script","text":"<p>After writing your script, you can run it in the Micromouse environment. Click the \"Run\" button in the interface to execute your script. Watch as your mouse navigates the maze according to your instructions.</p> <p>Note that you should now see the mouse complete the first mission in the campaign. If you encounter any issues, check the console for error messages and refer back to the commands reference to troubleshoot.</p>"},{"location":"getting-started/#step-5-explore-examples","title":"Step 5: Explore Examples","text":"<p>To see how others have solved mazes, check out the examples. These scripts can provide inspiration and demonstrate different techniques for maze-solving. You can modify these examples to suit your needs or use them as a starting point for your own scripts.</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide will help you set up the Micromouse environment on your system. Follow these steps to get started:</p>"},{"location":"installation/#minimum-system-requirements","title":"Minimum System Requirements","text":"<ul> <li>CPU: Dual-core CPU, 2.0 GHz+ (Intel i3 / AMD equivalent)</li> <li>RAM: 4 GB minimum (8 GB preferred)</li> <li>GPU: Integrated graphics with OpenGL 3.3 support (Intel HD 4000 or newer, AMD equivalent)</li> <li>Storage: 120 GB free space</li> <li>OS: Windows 10 / Ubuntu 22.04+</li> <li>Display: 1366\u00d7768 minimum resolution</li> </ul> <p>Note: Mac OS is currently not supported, not because of technical limitations, but due to lack of testing. (and a lazy developer)</p>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":""},{"location":"installation/#step-1-download-micromouse","title":"Step 1: Download Micromouse","text":"<p>Visit the Micromouse GitHub repository and download the latest release for your operating system.</p>"},{"location":"installation/#step-2-extract-the-files","title":"Step 2: Extract the Files","text":"<ul> <li>Windows: Right-click the downloaded ZIP file and select \"Extract All...\". Choose a destination folder.</li> <li>Linux: Use the terminal command <code>unzip micromouse.zip -d ~/micromouse</code> to extract the files to your home directory.</li> </ul>"},{"location":"installation/#step-3-have-fun","title":"Step 3: Have fun","text":"<p>Once you have extracted the files, navigate to the Micromouse directory and run the application.</p>"},{"location":"commands/for/","title":"For Command","text":"<p>The <code>FOR</code> command is used to go through a list and use its variables to perform an action. This allows for iterating over collections of data or performing actions on multiple items without writing repetitive code.</p>"},{"location":"commands/for/#syntax","title":"Syntax","text":"<pre><code>FOR &lt;variable name&gt; IN &lt;list variable&gt;\n    # Commands to execute for each item in the list\n</code></pre>"},{"location":"commands/for/#example-usage","title":"Example Usage","text":"<pre><code># Declare a list of points then move to each point\nLIST VECTOR POINTS = [{0,1},{0,2},{3,2}]\nFOR POINT IN POINTS\n    # Code to move to the points (see while command for more details)\n</code></pre>"},{"location":"commands/if/","title":"If Command","text":"<p>The <code>IF</code> command is used to execute a block of code conditionally based on the evaluation of a boolean expression. This allows for decision-making in your script, enabling different actions based on sensor readings or other conditions.</p> <p>Note you can use <code>ELSE</code> to provide an alternative block of code that will execute if the condition is false, allowing for more complex control flows.</p> <p>Note you can also use <code>NOT</code> to inverse the condition, allowing you to execute code when a condition is false.</p>"},{"location":"commands/if/#syntax","title":"Syntax","text":"<pre><code>IF &lt;condition&gt;\n    # Commands to execute if the condition is true\nELSE\n    # Commands to execute if the condition is false\n</code></pre> <pre><code>IF NOT &lt;condition&gt;\n    # Commands to execute if the condition is false\nELSE\n    # Commands to execute if the condition is true\n</code></pre>"},{"location":"commands/if/#available-conditions","title":"Available Conditions","text":"<p>There are several conditions you can use with the <code>IF</code> command, such as: - <code>IF SENSOR &lt;sensor name&gt;</code> - Checks if a specific sensor is active. - <code>IF FACING &lt;grid position&gt;</code> - Checks if the mouse is facing a specific grid position. - <code>IF ON &lt;grid position&gt;</code> - Checks if the mouse is on a specific grid position. - <code>IF CENTERED &lt;grid position&gt;</code> - Checks if the mouse is centered on a specific grid position.</p> <p>Note all of these also have a <code>NOT</code> version: - <code>IF NOT SENSOR &lt;sensor name&gt;</code> - Checks if a specific sensor is inactive. - <code>IF NOT FACING &lt;grid position&gt;</code> - Checks if the mouse is not facing a specific grid position. - <code>IF NOT ON &lt;grid position&gt;</code> - Checks if the mouse is not on a specific grid position. - <code>IF NOT CENTERED &lt;grid position&gt;</code> - Checks if the mouse is not centered on a specific grid position.</p>"},{"location":"commands/if/#example-usage","title":"Example Usage","text":"<pre><code># Check if the left sensor is active and move forward if it is (useful for wall-following behaviors)\nIF SENSOR LEFT PROX\n    MOVE\nELSE\n    TURN RIGHT\n</code></pre> <p>Note that the above example demonstrates the <code>IF</code> command but isn't perfect as the robot turns before its centered, you will have to modify this code to ensure the robot is centered before turning (and also turn a full 90 degrees).</p> <pre><code># Check if the mouse is facing a specific grid position and turn left if it is not\nIF NOT FACING {2,5}\n    LEFT\nELSE\n    MOVE\n</code></pre> <p>This example shows how to use the <code>IF</code> command to check the mouse's orientation and take action accordingly. The mouse will turn left if it is not facing the specified grid position, otherwise, it will move forward. Note that the grid position can be defined as a variable for more complex scripts.</p> <pre><code># Same code as above but using a variable for the grid position\nVAR VECTOR GOAL = {2,5}\nIF NOT FACING GOAL\n    LEFT\nELSE\n    MOVE\n</code></pre>"},{"location":"commands/loop/","title":"Loop Command","text":"<p>The <code>LOOP</code> command is used to repeat a block of code infinitely until a <code>BREAK</code> command is encountered. This is useful for creating continuous actions or behaviors in your script.</p> <p>It works similarly to loops in other programming languages, allowing you to execute a set of commands repeatedly without having to write them out multiple times.</p>"},{"location":"commands/loop/#example-usage","title":"Example Usage","text":"<pre><code># Move forward continuously\nLOOP\n    MOVE\n</code></pre> <p>In this example, the mouse will keep moving forward indefinitely. To stop the loop, you can use a <code>BREAK</code> command when a certain condition is met.</p> <pre><code># Move forward until a wall is detected\nLOOP\n    IF SENSOR FRONT PROX\n        BREAK\n    ELSE\n        MOVE\n</code></pre>"},{"location":"commands/movement/","title":"Movement Commands","text":"<p>Movement is fairly simple in the micromouse environment. All you have to remember is that all move commands use a small increment to allow for smooth control. This means that they must be paired with other commands to achieve larger movements.</p>"},{"location":"commands/movement/#move-command","title":"Move Command","text":"<p>The <code>MOVE</code> command is used to move the mouse forward by a small increment. It can be used in a loop to create continuous movement. Note the movement is relative to the mouse's current orientation. The increment can be adjusted in the settings if needed.</p> <p>Example Usage:</p> <pre><code># Move forward until a wall is detected in front\nWHILE NOT SENSOR FRONT PROX\n    MOVE\n</code></pre>"},{"location":"commands/movement/#turn-commands","title":"Turn Commands","text":"<p>There are two turn commands available: <code>LEFT</code> and <code>RIGHT</code>. These commands rotate the mouse by 1 degree in the specified direction. Like the <code>MOVE</code> command, these can be used in loops for continuous turning. Note that left and right are relative to the mouse's current orientation.</p> <p>Example Usage:</p> <pre><code># Turn left by 90 degrees when a wall is detected on the right\nIF SENSOR RIGHT PROX\n    REPEAT 90\n        LEFT\n</code></pre>"},{"location":"commands/repeat/","title":"Repeat Command","text":"<p>The <code>REPEAT</code> command is used to execute a block of code a specified number of times. This is useful for performing actions that need to be repeated a fixed number of times without writing the same code multiple times.</p> <p>Note that you can still use <code>BREAK</code> within a <code>REPEAT</code> block to exit early if a certain condition is met. This allows for more flexible control over the flow of your script.</p>"},{"location":"commands/repeat/#syntax","title":"Syntax","text":"<pre><code>REPEAT &lt;number&gt;\n    # Commands to repeat\n</code></pre>"},{"location":"commands/repeat/#example-usage","title":"Example Usage","text":"<pre><code># Move forward 5 times\nREPEAT 5\n    MOVE\n</code></pre> <p>In this example, the mouse will move forward 5 times. The <code>REPEAT</code> command allows you to specify how many times the block of code should be executed.</p> <pre><code># Turn left 360 times to make a full rotation\nREPEAT 360\n    LEFT\n</code></pre>"},{"location":"commands/while/","title":"While Command","text":"<p>The <code>WHILE</code> command is used to execute a block of code repeatedly as long as a specified condition is true. This allows for more complex control flows in your script, enabling actions to be performed until a certain state is reached.</p> <p>Note you can use <code>BREAK</code> within a <code>WHILE</code> block to exit early if needed, providing flexibility in how your script behaves.</p> <p>Note you can also due <code>WHILE NOT</code> commands to inverse the condition, allowing you to execute code while a condition is false.</p>"},{"location":"commands/while/#syntax","title":"Syntax","text":"<pre><code>WHILE &lt;condition&gt;\n    # Commands to execute while the condition is true\n</code></pre> <pre><code>WHILE NOT &lt;condition&gt;\n    # Commands to execute while the condition is false\n</code></pre>"},{"location":"commands/while/#available-conditions","title":"Available Conditions","text":"<p>There are several conditions you can use with the <code>WHILE</code> command, such as:</p> <ul> <li><code>WHILE SENSOR &lt;sensor name&gt;</code> - Checks if a specific sensor is active.</li> <li><code>WHILE FACING &lt;grid position&gt;</code> - Checks if the mouse is facing a specific grid position.</li> <li><code>WHILE ON &lt;grid position&gt;</code> - Checks if the mouse is on a specific grid position.</li> <li><code>WHILE CENTERED &lt;grid position&gt;</code> - Checks if the mouse is centered on a specific grid position.</li> </ul> <p>Note all of these also have a <code>NOT</code> version:</p> <ul> <li><code>WHILE NOT SENSOR &lt;sensor name&gt;</code> - Checks if a specific sensor is inactive.</li> <li><code>WHILE NOT FACING &lt;grid position&gt;</code> - Checks if the mouse is not facing a specific grid position.</li> <li><code>WHILE NOT ON &lt;grid position&gt;</code> - Checks if the mouse is not on a specific grid position.</li> <li><code>WHILE NOT CENTERED &lt;grid position&gt;</code> - Checks if the mouse is not centered on a specific grid position.</li> </ul>"},{"location":"commands/while/#example-usage","title":"Example Usage","text":"<pre><code># Move forward until a wall is detected in front\nWHILE NOT SENSOR FRONT PROX\n    MOVE\n</code></pre> <pre><code># Turn to face a grid position (x = 2, y = 5) and then move to it\nWHILE NOT FACING {2,5}\n    RIGHT\n\nWHILE NOT CENTERED {2,5}\n    MOVE\n</code></pre> <p>There is several lessons we can learn from the above example:</p> <ul> <li>Firstly the code will get stuck in the while loop so the second won't run until the first is true</li> <li>Secondly the variables can just be inserted as variable declarations however they can also be inserted as variables</li> </ul> <pre><code># The same code as above but using variables instead of declarations\nVAR VECTOR GOAL = {2,5}\nWHILE NOT FACING GOAL\n    RIGHT\n\nWHILE NOT CENTERED GOAL\n    MOVE\n</code></pre>"}]}